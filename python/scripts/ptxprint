#!/usr/bin/python3

import argparse, sys, os

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint

parser = argparse.ArgumentParser()
parser.add_argument('pid',nargs="?",help="Project id")
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-d','--directory',default=".",help="Directory to store temporary files in")
parser.add_argument('-m','--macros',help="Directory containing TeX macros (paratext2.tex)")
parser.add_argument('-t','--test', action='store_true',help="Quick start for a lazy typist")
args = parser.parse_args()

if args.paratext is None:
    args.paratext = ptxprint.runner.pt_settings

if not args.paratext:
    print("No Paratext Settings directory found")
    sys.exit(1)
else:
    args.paratext = args.paratext.replace("\\", "/")
    if args.paratext.endswith("/"):
        args.paratext = args.paratext[:-1]

# Where to find the default for -p
# HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Paratext\8:Settings_Directory
allprojects = []
for d in os.listdir(args.paratext):
    if os.path.exists(os.path.join(args.paratext, d, 'Settings.xml')):
        allprojects.append(d)
allprojects.sort()

mainw = ptxprint.PtxPrinterDialog(allprojects, args.paratext)

if args.pid:
    mainw.set("cb_project", args.pid)

def dojob(jobs, info, prjid, prjdir, tmpdir, logbuffer=None):
    donebooks = []
    for b in jobs:
        out = info.convertBook(b, tmpdir, prjdir)
        donebooks.append(out)
    info["project/books"] = donebooks
    if len(jobs) > 1:
        outfname = "ptxprint-{}_{}{}.tex".format(jobs[0], jobs[-1], prjid)
    else:
        outfname = "ptxprint-{}{}.tex".format(jobs[0], prjid)
    with open(os.path.join(tmpdir, outfname), "w") as texf:
        texf.write(info.asTex())
    if sys.platform == "linux":
        mdirs = args.macros or "/usr/lib/Paratext8/xetex/share/texmf-dist/tex/ptx2pdf:/usr/lib/Paratext9/xetex/share/texmf-dist/tex/ptx2pdf"
        os.putenv('TEXINPUTS', ".:" + mdirs)
    ptxprint.runner.call(["xetex", "--halt-on-error", outfname], cwd=tmpdir, logbuffer=logbuffer)
    print("cd {}; xetex {}".format(tmpdir, outfname))

def doit(printer):
    info = ptxprint.Info(printer, args.paratext, printer.ptsettings)
    prjid = printer.get("cb_project")
    prjdir = os.path.join(args.paratext, prjid)
    # save config
    config = info.createConfig(printer)
    with open(os.path.join(prjdir, "ptxprint.cfg"), "w") as outf:
        config.write(outf)
    tmpdir = os.path.join(prjdir, 'PrintDraft') if printer.get("c_useprintdraftfolder") else args.directory
    jobs = printer.getBooks()
    if printer.get("c_combine"):
        dojob(jobs, info, prjid, prjdir, tmpdir, logbuffer=printer.logbuffer)
    else:
        for j in jobs:
            dojob([j], info, prjid, prjdir, tmpdir, logbuffer=printer.logbuffer)

mainw.run(doit)
