#!/usr/bin/python3

import argparse, sys, os
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk

_errmsghelp = {
"! Unable to load picture":              "Check if picture file is located in 'Figures', 'local\\figures' or a\n" +\
                                         "specified folder. Also try the option 'Omit Missing Pictures'\n",
"! Unable to load picture or PDF file":  "Check if image/PDF file is available on the system.\n" +
                                         "If you have specified one or more Front/Back matter PDFs or a Watermark PDF\n" +
                                         "then ensure that the PDF(s) exist(s); OR uncheck those options (Advanced tab).\n",
"! Missing control sequence inserted.":  "Fallback font probably being applied to text in a footnote (not permitted!)\n",
"! Missing number, treated as zero.":    "Related to USFM3 illustration markup\n",
"! Undefined control sequence.":         "This is related to a USFM marker error (such as an unsupported marker)\n" +\
                                         "Try 'Run Basic Checks' in Paratext\n",
"! Illegal unit of measure (pt inserted).":    "One of the settings in the Stylesheet may be missing the units.\n" +\
                                         "To confirm that this is a stylesheet issue, temporarily turn off Stylesheets.\n" +\
                                         "Then, check any recent changes to the Stylesheets (on Advanced tab) and try again.\n",
"! File ended while scanning use of":    "Try turning off PrintDraftChanges.txt and both Stylesheets on Advanced tab.\n",
"! Output loop---25 consecutive dead cycles.":  "Unknown issue.\n",
"! Paratext stylesheet":                 "Try turning off the PrintDraft-mods stylesheet\n",
"! File ended while scanning use of \iotableleader.": "Problem with Formatting Intro Outline\n" +\
                                         "Try disabling option 'Right-Align \ior with tabbed leaders' on the Body tab\n",
"! Emergency stop.":                     "Probably a TeX macro problem - contact support, or post a bug report\n",
"! Not a letter.":                       "Possible fault in the hyphenation file\n" +\
                                         "Try turning off Hyphenate option located on the Body tab\n",
"! Font":                                "Font related issue - details unknown\n(Report this rare error please)\n",
"! Too many }'s":                        "Serious TeX macro issue - contact support, or post a bug report\n",
"! This can't happen (page)":            "Serious TeX macro issue - contact support, or post a bug report\n",
"! I can't find file `paratext2.tex'.":  "Possibly a faulty installation.\n",
"! I can't find file `ptx-tracing.tex'.":"Possibly a faulty installation.\n",
"Runaway argument?":                     "Unknown issue. Maybe related to Right-aligned tabbed leaders\n" +\
                                         "Try turning off PrintDraftChanges.txt and both Stylesheets\n",
"Unknown":                               "Sorry! No diagnostic help is available for this error.\n" +\
                                         "Try turning off all Advanced settings & disable Changes and Stylesheets\n",
}
# \def\LineSpacingFactor{{{paragraph/linespacingfactor}}}
# \def\VerticalSpaceFactor{{1.0}}
# \baselineskip={paragraph/linespacing}pt {paragraph/varlinespacing} {paragraph/linemax} {paragraph/linemin}
# \XeTeXinterwordspaceshaping = {document/spacecntxtlztn}
# %\extrafont  %% This will be replaced by code for the fallback fonts to be used for special/missing characters

_diglot = {
"diglot/colorfonts" :       "document/ifcolorfonts",
"diglot/ifrtl" :            "document/ifrtl",
"diglot/fontfactor" :       "paper/fontfactor",
"diglot/iflinebreakon" :    "document/iflinebreakon",
"diglot/linebreaklocale" :  "document/linebreaklocale",
"diglot/useglyphmetrics" :  "paragraph/useglyphmetrics",

"diglot/fontregular" :      "fontregular",
"diglot/fontregeng" :       "fontregular/engine",
"diglot/texfeatures" :      "font/texfeatures",
"diglot/docscript" :        "document/script",
"diglot/docdigitmapping" :  "document/digitmapping",
                            
"diglot/fontbold" :         "fontbold",
"diglot/fontboldeng" :      "fontbold/engine",
"diglot/boldembolden" :     "fontbold/embolden",
"diglot/boldslant" :        "fontbold/slant",
                            
"diglot/fontitalic" :       "fontitalic",
"diglot/fontitaleng" :      "fontitalic/engine",
"diglot/italembolden" :     "fontitalic/embolden",
"diglot/italslant" :        "fontitalic/slant",
                            
"diglot/fontbolditalic" :   "fontbolditalic",
"diglot/fontbolditaleng" :  "fontbolditalic/engine",
"diglot/bolditalembolden" : "fontbolditalic/embolden",
"diglot/boldital/slant" :   "fontbolditalic/slant",
}
if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
    sys.stdout = open(os.devnull, "w")
    # sys.stdout = open("D:\Temp\ptxprint-sysout.tmp", "w")
    sys.stderr = sys.stdout
else:
    gi.require_version('GtkSource', '3.0')

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint
from ptxprint.view import ViewModel, VersionStr
from ptxprint.gtkview import GtkViewModel
from ptxprint.font import initFontCache
from ptxprint.ptsettings import ParatextSettings
from ptxprint.runjob import RunJob

parser = argparse.ArgumentParser()
# parser.add_argument('-h','--help', help="show this help message and exit")
parser.add_argument('pid',nargs="?",help="Project id")
parser.add_argument('-c','--config',help='Configuration path to load')
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-d','--directory',help="Directory to store temporary files in")
parser.add_argument('-P','--print',action='store_true',help="Hits print")
parser.add_argument('-b','--books',help='Space separated bookid list to set')
parser.add_argument('-m','--macros',help="Directory containing TeX macros (paratext2.tex)")
parser.add_argument('-l','--logging',action="store_true",help="Output logging to terminal instead of logging window")
parser.add_argument('-e','--experimental',action="store_true",help="Enable experimental features")
parser.add_argument('--timeout',default=200,type=int,help='xetex runtime timeout')
parser.add_argument('-S','--splash',action="store_true",help="Force splash screen")
# parser.add_argument('-t','--test', action='store_true',help="Quick start for a lazy typist")
args = parser.parse_args()

if args.paratext is None:
    args.paratext = ptxprint.runner.pt_settings

if not args.paratext:
    print("No Paratext Settings directory found")
    sys.exit(1)
else:
    args.paratext = os.path.abspath(args.paratext.replace("\\", "/"))
    if args.paratext.endswith("/"):
        args.paratext = args.paratext[:-1]

if args.directory is not None:
    args.directory = os.path.abspath(args.directory)

# Where to find the default for -p
# HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Paratext\8:Settings_Directory
allprojects = []
for d in os.listdir(args.paratext):
    if os.path.exists(os.path.join(args.paratext, d, 'Settings.xml')):
        allprojects.append(d)
allprojects.sort()

if args.print:
    mainw = ViewModel(allprojects, args.paratext, args.directory)
else:
    css = """.printbutton:active { background-color: chartreuse; background-image: None }
    .fontbutton {font-size: smaller}"""
    provider = Gtk.CssProvider()
    provider.load_from_data(css.encode("utf-8"))
    Gtk.StyleContext().add_provider_for_screen(Gdk.Screen.get_default(), provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
    mainw = GtkViewModel(allprojects, args.paratext, args.directory)
    mainw.ExperimentalFeatures(args.experimental)

if args.pid:
    mainw.setPrjid(args.pid)
    if args.config is not None:
        mainw.setConfigId(args.config)

def doit(printer):
    runjob = RunJob(printer)
    runjob.doit(args)

if args.print:
    initFontCache()
    if args.books is not None and len(args.books):
        mainw.bookNoUpdate = True
        bl = args.books.split(" ")
        if len(bl) == 1:
            mainw.set("cb_book", bl[0])
            mainw.set("c_multiplebooks", False)
        elif len(bl) > 1:
            mainw.set("t_booklist", args.books)
            mainw.set("c_multiplebooks", True)
    doit(mainw)
else:
    splash = args.splash
    mainw.run(doit, splash=splash)
