#!/usr/bin/python3

import argparse, sys, os, re, subprocess, img2pdf
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
from shutil import copyfile, rmtree

_errmsghelp = {
"! Unable to load picture.":             "Check if picture file is located in 'Figures', 'local\\figures' or a\nspecified folder. Also try the option 'Omit Missing Pictures'\n",
"! Unable to load picture or PDF file.": "Check if image/PDF file is available on the system\n",
"! Missing control sequence inserted.":  "Fallback font probably being applied to text in a footnote (not permitted!)\n",
"! Missing number, treated as zero.":    "Related to USFM3 illustration markup\n",
"! Undefined control sequence.":         "This is related to a USFM marker error (such as an unsupported marker)\nTry 'Run Basic Checks' in Paratext\n",
"! File ended while scanning use of":    "Try turning off PrintDraftChanges.txt and both Stylesheets on Advanced tab\n",
"! Paratext stylesheet":                 "Try turning off the PrintDraft-mods stylesheet\n",
"! Not a letter.":                       "Possible fault in the hyphenation file\nTry turning off Hyphenate option located on the Body tab\n",
"! Font":                                "Font related issue - details unknown\n(Report this rare error please)\n",
"! Too many }'s":                        "Serious TeX macro issue - contact support, or post a bug report\n",
"! This can't happen (page)":            "Serious TeX macro issue - contact support, or post a bug report\n",
"Runaway argument?":                     "Unknown issue. Maybe related to Right-aligned tabbed leaders\nTry turning off PrintDraftChanges.txt and both Stylesheets\n",
"Unknown":                               "Sorry! No diagnostic help is available for this error.\nTry turning off all Advanced settings & disable Changes and Stylesheets\n",
}
if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
    sys.stdout = open(os.devnull, "w")
    # sys.stdout = open("D:\Temp\ptxprint-sysout.tmp", "w")
    sys.stderr = sys.stdout
else:
    gi.require_version('GtkSource', '3.0')

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint
from ptxprint.font import initFontCache
from ptxprint.info import universalopen

parser = argparse.ArgumentParser()
# parser.add_argument('-h','--help', help="show this help message and exit")
parser.add_argument('pid',nargs="?",help="Project id")
parser.add_argument('-c','--config',help='Configuration path to load')
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-d','--directory',default=".",help="Directory to store temporary files in")
parser.add_argument('-P','--print',action='store_true',help="Hits print")
parser.add_argument('-b','--books',help='Space separated bookid list to set')
parser.add_argument('-m','--macros',help="Directory containing TeX macros (paratext2.tex)")
parser.add_argument('-l','--logging',action="store_true",help="Output logging to terminal instead of logging window")
parser.add_argument('-e','--experimental',action="store_true",help="Enable experimental features")
parser.add_argument('-T','--timeout',default=200,type=int,help='xetex runtime timeout')
parser.add_argument('-S','--splash',action="store_true",help="Force splash screen")
# parser.add_argument('-t','--test', action='store_true',help="Quick start for a lazy typist")
args = parser.parse_args()

if args.paratext is None:
    args.paratext = ptxprint.runner.pt_settings

if not args.paratext:
    print("No Paratext Settings directory found")
    sys.exit(1)
else:
    args.paratext = args.paratext.replace("\\", "/")
    if args.paratext.endswith("/"):
        args.paratext = args.paratext[:-1]

# Where to find the default for -p
# HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Paratext\8:Settings_Directory
allprojects = []
for d in os.listdir(args.paratext):
    if os.path.exists(os.path.join(args.paratext, d, 'Settings.xml')):
        allprojects.append(d)
allprojects.sort()

css = """.printbutton:active { background-color: chartreuse; background-image: None }
.fontbutton {font-size: smaller}"""
provider = Gtk.CssProvider()
provider.load_from_data(css.encode("utf-8"))
Gtk.StyleContext().add_provider_for_screen(Gdk.Screen.get_default(), provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

mainw = ptxprint.PtxPrinterDialog(allprojects, args.paratext, working_dir=args.directory)
mainw.ExperimentalFeatures(args.experimental)

if args.pid:
    mainw.set("cb_project", args.pid)

def parselog(fname, rerunp=False, lines=20):
    loglines = []
    rerunres = False
    with open(fname, "r", encoding="utf-8", errors="ignore") as logfile:
        try:
            for i, l in enumerate(logfile.readlines()):
                if rerunp and l.startswith("PARLOC: Rerun."):
                    rerunres = True
                loglines.append(l)
                if len(loglines) > lines:
                    loglines.pop(0)
        except:
            loglines.append("Logfile missing: "+fname)
    return (loglines, rerunres)

def readfile(fname):
    try:
        with open(fname, "r", encoding="utf-8") as inf:
            res = "".join(inf.readlines())
        return res
    except FileNotFoundError:
        return ""

def dojob(jobs, info, prjid, prjdir, tmpdir, logbuffer=None):
    donebooks = []
    for b in jobs:
        out = info.convertBook(b, tmpdir, prjdir)
        donebooks.append(out)
    info["project/bookids"] = jobs
    info["project/books"] = donebooks
    if len(jobs) > 1:
        outfname = "ptxprint-{}_{}{}.tex".format(jobs[0], jobs[-1], prjid)
    else:
        outfname = "ptxprint-{}{}.tex".format(jobs[0], prjid)
    info.update()
    with open(os.path.join(tmpdir, outfname), "w", encoding="utf-8") as texf:
        texf.write(info.asTex(filedir=tmpdir, jobname=outfname.replace(".tex", "")))
    os.putenv("hyph_size", "32749")     # always run with maximum hyphenated words size (xetex is still tiny ~200MB resident)
    os.putenv("stack_size", "32768")    # extra input stack space (up from 5000)
    ptxmacrospath = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../src"))
    if not os.path.exists(ptxmacrospath):
        for b in (getattr(sys, 'USER_BASE', '.'), sys.prefix):
            if b is None:
                continue
            ptxmacrospath = os.path.abspath(os.path.join(b, 'ptx2pdf'))
            if os.path.exists(ptxmacrospath):
                break
    if info['project/useptmacros'] == "false":
        if not os.getenv('TEXINPUTS'):
            texinputs = [os.path.abspath(tmpdir), ptxmacrospath]
            os.putenv('TEXINPUTS', (";" if sys.platform=="win32" else ":").join(texinputs))
    elif sys.platform == "linux":
        if not os.getenv('TEXINPUTS'):
            mdirs = args.macros or "/usr/lib/Paratext8/xetex/share/texmf-dist/tex/ptx2pdf:/usr/lib/Paratext9/xetex/share/texmf-dist/tex/ptx2pdf"
            os.putenv('TEXINPUTS', ".:" + mdirs)
    os.putenv("MISCFONTS", ptxmacrospath)
    numruns = 5
    while numruns > 0:
        if info["document/toc"] != "%":
            tocdata = readfile(os.path.join(tmpdir, outfname.replace(".tex", ".toc")))
        runner = ptxprint.runner.call(["xetex", "--halt-on-error", outfname], cwd=tmpdir, logbuffer=(logbuffer if not args.logging else None))
        if isinstance(runner, subprocess.Popen) and runner is not None:
            try:
                runner.wait(args.timeout)
            except subprocess.TimeoutExpired:
                print("Timed out!")
            info.res = runner.returncode
        else:
            info.res = runner
        print("cd {}; xetex {} -> {}".format(tmpdir, outfname, info.res))
        (info.loglines, rerun) = parselog(os.path.join(tmpdir, outfname.replace(".tex", ".log")), rerunp=True, lines=300)
        if info.res:
            break
        elif info["document/toc"] != "%" and not rerun:
            tocndata = readfile(os.path.join(tmpdir, outfname.replace(".tex", ".toc")))
            rerun = tocdata != tocndata
            if rerun:
                print("Rerunning because the Table of Contents was updated")
            else:
                break
        elif rerun:
            print("Rerunning because inline chapter numbers moved")
        else:
            break
        numruns -= 1
    print("Done")
    return outfname

def doit(printer, display=True):
    info = printer.info or ptxprint.Info(printer, args.paratext, printer.prjid)
    prjid = printer.get("cb_project")
    prjdir = os.path.join(args.paratext, prjid)
    if prjid is None or not len(prjid):     # can't print no project
        return
    info.update()  # save config
    info.GenerateNestedStyles()
    config = info.createConfig(printer)
    invPW = printer.get("t_invisiblePassword")
    if invPW == None or invPW == "": # This config is unlocked
        # So it it safe/allowed to save the current config
        printer.saveConfig(config)
    # else:
        # print("Current Config is Locked, so changes have NOT been saved")
    tmpdir = os.path.join(prjdir, 'PrintDraft') if printer.get("c_useprintdraftfolder") else args.directory
    os.makedirs(tmpdir, exist_ok=True)
    jobs = printer.getBooks()

    if printer.get("c_includeillustrations"):
        gatherIllustrations(jobs, prjid, prjdir, printer)

    info.changes = None
    if printer.get("c_combine"):
        texfiles = [dojob(jobs, info, prjid, prjdir, tmpdir, logbuffer=printer.logbuffer)]
    else:
        texfiles = [dojob([j], info, prjid, prjdir, tmpdir, logbuffer=printer.logbuffer) for j in jobs]
    # Work out what the resulting PDF was called
    if len(jobs) > 1 and printer.get("c_combine"):
        pdfname = os.path.join(tmpdir, "ptxprint-{}_{}{}.pdf".format(jobs[0], jobs[-1], prjid))
    else:
        pdfname = os.path.join(tmpdir, "ptxprint-{}{}.pdf".format(jobs[0], prjid))
    # Check the return code to see if generating the PDF was successful before opening the PDF
    if info.res == 0:
        if display and os.path.exists(pdfname):
            if sys.platform == "win32":
                os.startfile(pdfname)
            elif sys.platform == "linux":
                subprocess.call(('xdg-open', pdfname))
            # Only delete the temp files if the PDF was created AND the user did NOT select to keep them
            if not printer.get("c_keepTemporaryFiles"):
                removeTempFiles(texfiles,tmpdir,info)
    else: # if info.res != 0:
        if not args.print: # We don't want pop-up messages if running in command-line mode
            # it did NOT finish successfully, so help them troubleshoot what went wrong:
            finalLogLines = info.loglines[-30:-10]
            foundmsg = False
            finalLogLines.append("-"*90+"\n")
            for l in finalLogLines:
                # print(l)
                if l[:1] == "!" and not foundmsg:
                    for m in sorted(_errmsghelp.keys(),key=len, reverse=True):
                        if m in l:
                            if l[:-1] != m:
                                finalLogLines.append("{}\n".format(m))
                            finalLogLines.append(_errmsghelp[m])
                            foundmsg = True
                            break
            if not foundmsg:
                finalLogLines.append(_errmsghelp["Unknown"])
            books = re.findall(r"\d\d(...).+?-draft.SFM", "".join(finalLogLines))
            if len(books):
                book = " in {}".format(books[0])
            else:
                book = ""
            refs = re.findall(r"([1-9]\d{0,2}[.:][1-9]\d{0,2}[^0-9])", "".join(finalLogLines))
            if len(refs):
                finalLogLines.append("\nReferences to check{}: {}".format(book, ", ".join(refs)))

            mrkrs = re.findall(r"(\\[a-z0-9]{0,5}[ *\r\n.])", "".join(finalLogLines[-8:]))
            if len(mrkrs):
                finalLogLines.append("\nMarkers to check: {}".format(", ".join(mrkrs)))

            files = re.findall(r'(?i)([^\\/\n."= ]*?\.(?=jpg|tif|png|pdf)...)', "".join(finalLogLines))
            if len(files):
                finalLogLines.append("\nFile(s) to check: {}".format(", ".join(files)))
            par = par = printer.builder.get_object('ptxprint')
            dialog = Gtk.MessageDialog(parent=par, modal=True, message_type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, \
                text="Failed to create: "+re.sub(r".+[\\/](.+\.pdf)",r"\1",pdfname))
            dialog.set_title ("PTXprint [0.6.1 Beta] - Error!")
            dialog.format_secondary_text("".join(finalLogLines[-20:]))
            dialog.set_keep_above(True)
            dialog.run()
            dialog.set_keep_above(False)
            dialog.destroy()

def base(fpath):
    return os.path.basename(fpath)[:-4]

# https://sites.google.com/a/lci-india.org/typesetting/home/illustrations/where-to-find-illustrations
# We could build the credit text too if we wanted to (and perhaps a list of pg numbers on which the pictures were found)
def codeLower(fpath):
    cl = re.findall(r"(?i)_?((?=cn|co|hk|lb|bk|ba|dy|gt|dh|mh|mn|wa|dn|ib)..\d{5})[abc]?$", base(fpath))
    if cl:
        return cl[0].lower()
    else:
        return ""

def newBase(fpath):
    clwr = codeLower(fpath)
    if len(clwr):
        return clwr
    else:
        return re.sub('[()&+,. ]', '_', base(fpath).lower())

def gatherIllustrations(jobs, prjid, prjdir, printer):
    info = printer.info or ptxprint.Info(printer, args.paratext, printer.prjid)
    tmpPicpath = os.path.join(printer.working_dir, "tmpPics")
    folderList = ["tmpPics", "tmpPicLists"] 
    removeTmpFolders(printer.working_dir, folderList)
    if printer.get("c_useCustomFolder"):
        srchlist = [printer.customFigFolder]
    else:
        srchlist = []
    if sys.platform == "win32":
        srchlist += [os.path.join(prjdir, "figures")]
        srchlist += [os.path.join(prjdir, "local", "figures")]
    elif sys.platform == "linux":
        chkpaths = []
        for d in ("local", "figures"):
            chkpaths += [os.path.join(prjdir, x) for x in (d, d.title())]
        for p in chkpaths:
            if os.path.exists(p):
                srchlist += [p]
    extensions = []
    extdflt = ["jpg", "png", "pdf", "tif"]
    extuser = re.sub("(pdf|tif)", "pdf tif",printer.get("t_imageTypeOrder").lower())
    extuser = re.findall("([a-z]{3})",extuser)
    extensions = [x for x in extdflt if x in extuser]
    if not len(extensions):   # If the user hasn't defined any extensions 
        extensions = extdflt  # then we can assign defaults
    fullnamelist = []
    for bk in jobs:
        fname = printer.getBookFilename(bk, prjdir)
        if printer.get("c_usePicList"): # Read the PicList to get a list of needed illustrations
            doti = fname.rfind(".")
            if doti > 0:
                plfname = fname[:doti] + "-draft" + fname[doti:] + ".piclist"
            piclstfname = os.path.join(printer.configPath(False), "PicLists", plfname)
            if os.path.exists(piclstfname):
                with universalopen(piclstfname, rewrite=True) as inf:
                    dat = inf.read()
                    # MAT 19.13 |CN01771C.jpg|col|tr||Bringing the children to Jesus|19:13
                    fullnamelist += re.findall(r"(?i)\|(.+?\.(?=jpg|tif|png|pdf)...)\|", dat)
        else:
            infname = os.path.join(prjdir, fname)
            with universalopen(infname) as inf:
                dat = inf.read()
                inf.close() # Look for USFM2 and USFM3 type inline \fig ... \fig* illustrations
                fullnamelist += re.findall(r"(?i)\\fig .*?\|(.+?(?!\d{5}[a-c]?).+?\.(?=jpg|tif|png|pdf)...)\|.+?\\fig\*", dat)
                fullnamelist += re.findall(r'(?i)\\fig .*?src="(.+?\.(?=jpg|tif|png|pdf)...)" .+?\\fig\*', dat) 
        newBaseList = [newBase(f) for f in fullnamelist]

    os.makedirs(tmpPicpath, exist_ok=True)
    for srchdir in srchlist:
        if srchdir != None and os.path.exists(srchdir):
            for subdir, dirs, files in os.walk(srchdir):
                if subdir != "tmpPics": # Avoid recursively scanning the folder we are copying to!
                    for file in files:
                        origExt = file[-4:].lower()
                        if origExt[1:] in extensions:
                            filepath = subdir + os.sep + file
                            if newBase(filepath) in newBaseList:
                                # print(filepath, "-->", newBase(filepath)+origExt.lower())
                                carefulCopy(printer, filepath, newBase(filepath)+origExt.lower())

    if printer.get("c_usePicList"): # Write out new tmpPicLists
        extOrder = info.getExtOrder(printer)
        for bk in jobs:
            fname = printer.getBookFilename(bk, prjdir)
            if printer.get("c_usePicList"): # Read the PicList to get a list of needed illustrations
                doti = fname.rfind(".")
                if doti > 0:
                    plfname = fname[:doti] + "-draft" + fname[doti:] + ".piclist"
                # Now write out the new PicList to a temp folder
                piclstfname = os.path.join(printer.configPath(False), "PicLists", plfname)
                if os.path.exists(piclstfname):
                    with universalopen(piclstfname) as inf:
                        dat = inf.read()
                        dat = re.sub(r"(?m)%.+?\r?\n", "", dat) # Throw out all comments
                        for f in fullnamelist:
                            ext = f[-4:].lower()
                            if ext[1:] == "tif":
                                ext = ".pdf"
                            tmpPicfname = newBase(f)+ext
                            if os.path.exists(os.path.join(tmpPicpath, tmpPicfname)):
                                dat = re.sub(re.escape(f), tmpPicfname, dat)  # might need to wrap the f in |filename.tif|
                            else:
                                found = False
                                for ext in extOrder:
                                    tmpPicfname = newBase(f)+"."+ext
                                    if os.path.exists(os.path.join(tmpPicpath, tmpPicfname)):
                                        dat = re.sub(re.escape(f), tmpPicfname, dat)
                                        found = True
                                        break
                                if not found and printer.get("c_skipmissingimages"):
                                    dat = re.sub(r"(?im)(^.*{})".format(re.escape(f)), r"% \1", dat)

                        if printer.get("c_fighiderefs"): # del refs (ch:vs-vs) from figure caption
                            dat = re.sub(r"\|(\d+[:.]\d+([-,\u2013\u2014]\d+)?)\r?\n".format(re.escape(f)), "|\n", dat)

                        tmpiclstpath = os.path.join(printer.working_dir, "tmpPicLists")
                        tmpiclstfname = os.path.join(tmpiclstpath, plfname)
                        os.makedirs(tmpiclstpath, exist_ok=True)
                        dat = "% Temporary PicList generated by PTXprint - DO NOT EDIT\n"+dat
                        with open(tmpiclstfname, "w", encoding="utf-8") as outf:
                            outf.write(dat)

def carefulCopy(printer, srcpath, tgtfile):
    tmpPicPath = os.path.join(printer.working_dir, "tmpPics")
    tgtpath = os.path.join(tmpPicPath, tgtfile)
    if srcpath[-4:].lower() == ".tif":
        tempPDFname = os.path.join(tmpPicPath, "tempPDF.pdf")
        tgtpath = tgtpath[:-4]+".pdf"
        with open(tempPDFname,"wb") as f:
            try:
                f.write(img2pdf.convert(srcpath))
                srcpath = tempPDFname
            except:
                return
    if not os.path.exists(tgtpath):
        copyfile(srcpath, tgtpath)
    else:
        if printer.get("c_useLowResPics"): # we want to use the smallest available file
            if os.path.getsize(srcpath) < os.path.getsize(tgtpath):
                copyfile(srcpath, tgtpath)
        else:                              # we want to use the largest file available
            if os.path.getsize(srcpath) > os.path.getsize(tgtpath):
                copyfile(srcpath, tgtpath)
    try:
        os.remove(tempPDFname)
    except:
        pass

def removeTempFiles(texfiles,tmpdir,info):
    for extn in ('delayed','parlocs','notepages', 'tex','log'):
        for t in texfiles:
            delfname = os.path.join(tmpdir, t.replace(".tex", "."+extn))
            try:
                os.remove(delfname)
            except OSError:
                dialog = Gtk.MessageDialog(parent=None, modal=True, message_type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK,
                    text="Warning: Could not delete temporary file.")
                dialog.format_secondary_text("File: " + delfname)
                dialog.set_keep_above(True)
                dialog.run()
                dialog.set_keep_above(False)
                dialog.destroy()
    for delfname in info['project/books']:
        try:
            os.remove(os.path.join(tmpdir, delfname))
        except OSError:
            dialog = Gtk.MessageDialog(parent=None, modal=True, message_type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK,
                text="Warning: Could not delete temporary file.")
            dialog.format_secondary_text("File: " + delfname)
            dialog.set_keep_above(True)
            dialog.run()
            dialog.set_keep_above(False)
            dialog.destroy()
    folderList = ["tmpPics", "tmpPicLists"] 
    removeTmpFolders(tmpdir, folderList)

def removeTmpFolders(tempFolder, delFolders):
    for p in delFolders:
        path2del = os.path.join(tempFolder, p)
        # Make sure we're not deleting something closer to Root!
        if len(path2del) > 30 and os.path.exists(path2del):
            try:
                rmtree(path2del)
            except OSError:
                print("Error Deleting temporary folder: {}".format(path2del))

if args.config is not None:
    initFontCache()
    mainw.set("cb_savedConfig", args.config)
if args.print:
    initFontCache()
    mainw.updateProjectSettings()
    if args.books is not None and len(args.books):
        mainw.bookNoUpdate = True
        bl = args.books.split(" ")
        if len(bl) == 1:
            mainw.set("cb_book", bl[0])
            mainw.set("c_multiplebooks", False)
        elif len(bl) > 1:
            mainw.set("t_booklist", args.books)
            mainw.set("c_multiplebooks", True)
    doit(mainw, display=False)
else:
    splash = args.splash
    if sys.platform != 'linux' and not splash:
        splash = True
    mainw.run(doit, splash=splash)
