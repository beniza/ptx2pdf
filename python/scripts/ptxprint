#!/usr/bin/python3

import argparse, sys, os

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint
from ptxprint.view import ViewModel, VersionStr
from ptxprint.font import initFontCache
from ptxprint.runjob import RunJob

parser = argparse.ArgumentParser()
# parser.add_argument('-h','--help', help="show this help message and exit")
parser.add_argument('pid',nargs="?",help="Project id")
parser.add_argument('-c','--config',help='Configuration path to load')
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-d','--directory',help="Directory to store temporary files in")
parser.add_argument('-P','--print',action='store_true',help="Hits print")
parser.add_argument('-b','--books',help='Space separated bookid list to set')
parser.add_argument('-m','--macros',help="Directory containing TeX macros (paratext2.tex)")
parser.add_argument('-l','--logging',action="store_true",help="Output logging to terminal instead of logging window")
parser.add_argument('-e','--experimental',action="store_true",help="Enable experimental features")
parser.add_argument('--timeout',default=200,type=int,help='xetex runtime timeout')
parser.add_argument('-T','--testing',action='store_true',help="Run in testing, output xdv")
parser.add_argument('-f','--fontpath',action='append',help="Directory of fonts to include (repeatable)")
parser.add_argument('-S','--splash',action="store_true",help="Force splash screen")
# parser.add_argument('-t','--test', action='store_true',help="Quick start for a lazy typist")
args = parser.parse_args()

if args.paratext is None:
    args.paratext = ptxprint.runner.pt_settings

if not args.paratext:
    print("No Paratext Settings directory found")
    sys.exit(1)
else:
    args.paratext = os.path.abspath(args.paratext.replace("\\", "/"))
    if args.paratext.endswith("/"):
        args.paratext = args.paratext[:-1]

if args.directory is not None:
    args.directory = os.path.abspath(args.directory)

# Where to find the default for -p
# HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Paratext\8:Settings_Directory

if args.print:
    mainw = ViewModel(args.paratext, args.directory)
else:
    import gi
    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk, Gdk
    if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
        sys.stdout = open(os.devnull, "w")
        # sys.stdout = open("D:\Temp\ptxprint-sysout.tmp", "w")
        sys.stderr = sys.stdout
    else:
        gi.require_version('GtkSource', '3.0')

    from ptxprint.gtkview import GtkViewModel
    css = """.printbutton:active { background-color: chartreuse; background-image: None }
    .fontbutton {font-size: smaller}"""
    provider = Gtk.CssProvider()
    provider.load_from_data(css.encode("utf-8"))
    Gtk.StyleContext().add_provider_for_screen(Gdk.Screen.get_default(), provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
    mainw = GtkViewModel(args.paratext, args.directory)
    mainw.ExperimentalFeatures(args.experimental)

if args.pid:
    mainw.setPrjid(args.pid)
    if args.config is not None:
        mainw.setConfigId(args.config)

def doit(printer):
    runjob = RunJob(printer, os.path.dirname(__file__), args)
    runjob.doit()

if args.fontpath is not None:
    for p in args.fontpath:
        if os.path.exists(p):
            font.cachepath(p)

if args.print:
    initFontCache()
    if args.books is not None and len(args.books):
        mainw.bookNoUpdate = True
        bl = args.books.split(" ")
        if len(bl) == 1:
            mainw.set("cb_book", bl[0])
            mainw.set("c_multiplebooks", False)
        elif len(bl) > 1:
            mainw.set("t_booklist", args.books)
            mainw.set("c_multiplebooks", True)
    doit(mainw)
else:
    splash = args.splash
    mainw.run(doit, splash=splash)
