#!/usr/bin/python3

import argparse, sys, os

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint
from ptxprint.view import ViewModel, VersionStr
from ptxprint.font import initFontCache, cachepath
from ptxprint.runjob import RunJob

parser = argparse.ArgumentParser()
# parser.add_argument('-h','--help', help="show this help message and exit")
parser.add_argument('pid',nargs="?",help="Project id or full path to a ptxprint.cfg file")
parser.add_argument('-c','--config',help='Configuration path to load')
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-d','--directory',help="Directory to store temporary files in")
parser.add_argument('-P','--print',action='store_true',help="Hits print")
parser.add_argument('-b','--books',help='Space separated bookid list to set')
parser.add_argument('-m','--macros',help="Directory containing TeX macros (paratext2.tex)")
parser.add_argument('-l','--logging',action="store_true",help="Output logging to terminal instead of logging window")
parser.add_argument('-e','--experimental',action="store_true",help="Enable experimental features")
parser.add_argument('--timeout',default=200,type=int,help='xetex runtime timeout')
parser.add_argument('-T','--testing',action='store_true',help="Run in testing, output xdv")
parser.add_argument('-f','--fontpath',action='append',help="Directory of fonts to include (repeatable)")
parser.add_argument('--nofontcache',action="store_true",help="Don't use system fonts")
parser.add_argument('-S','--splash',action="store_true",help="Force splash screen")
parser.add_argument('-A','--archive',help="Create archive of project")
parser.add_argument('--nuseusfmerge',action="store_true",help="Use a different kind of merge for diglot")
parser.add_argument('--debug',action="store_true",help="Give debug output")
# parser.add_argument('-t','--test', action='store_true',help="Quick start for a lazy typist")
args = parser.parse_args()

if args.logging and getattr(sys, 'frozen') and hasattr(sys, '_MEIPASS'):
    errfile = open("ptxprint.log", "w")
    sys.stdio = errfile
    sys.stderr = errfile

if args.paratext is None:
    args.paratext = ptxprint.runner.pt_settings

if not args.paratext:
    print("No Paratext Settings directory found")
    sys.exit(1)
else:
    args.paratext = os.path.abspath(args.paratext.replace("\\", "/"))
    if args.paratext.endswith("/"):
        args.paratext = args.paratext[:-1]

if any(x in args.pid for x in "\\/") or args.pid.lower().endswith(".cfg"):
    pidpath = os.path.relpath(args.pid, args.paratext).replace("\\", "/")
    if pidpath.startswith("..") or pidpath.startswith("/"):
        pidpath = args.pid.replace("\\", "/")
    pidbits = pidpath.split("/")
    if len(pidbits) > 4 and "ptxprint" in pidbits[-3:-2]:
        if pidbits[-2] == "ptxprint":
            args.paratext = "/".join(pidbits[:-4])
            pidbits = pidbits[-4:]
        elif pidbits[-3] == "ptxprint":
            args.paratext = "/".join(pidbits[:-5])
            pidbits = pidbits[-5:]
    if len(pidbits) == 5:
        args.config = pidbits[3]
    if len(pidbits) > 3:
        args.pid = pidbits[0]
    print(args.pid, args.config)

if args.directory is not None:
    args.directory = os.path.abspath(args.directory)

# Where to find the default for -p
# HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Paratext\8:Settings_Directory

if args.print or args.archive is not None:
    mainw = ViewModel(args.paratext, args.directory)
else:
    from ptxprint.gtkview import GtkViewModel
    mainw = GtkViewModel(args.paratext, args.directory)
    mainw.ExperimentalFeatures(args.experimental)

if args.pid:
    mainw.setPrjid(args.pid)
    if args.config is not None:
        mainw.setConfigId(args.config)

scriptsdir = os.path.dirname(__file__)
if os.path.exists("/usr/share/ptx2pdf") and not os.path.exists(os.path.join(scriptsdir, "..", "..", "src")):
    scriptsdir = "/usr/share/ptx2pdf"

def doit(printer):
    runjob = RunJob(printer, scriptsdir, args)
    runjob.doit()
    return runjob.res

if args.fontpath is not None:
    for p in args.fontpath:
        if os.path.exists(p):
            cachepath(p, nofclist=args.nofontcache)

if args.print or args.archive is not None:
    res = 0
    initFontCache(nofclist=args.nofontcache)
    if args.print:
        if args.books is not None and len(args.books):
            mainw.bookNoUpdate = True
            bl = args.books.split(" ")
            if len(bl) == 1:
                mainw.set("cb_book", bl[0])
                mainw.set("c_multiplebooks", False)
            elif len(bl) > 1:
                mainw.set("t_booklist", args.books)
                mainw.set("c_multiplebooks", True)
        res = doit(mainw)
    if args.archive:
        mainw.createArchive(args.archive)
    sys.exit(res)
else:
    splash = args.splash
    mainw.run(doit, splash=splash)
