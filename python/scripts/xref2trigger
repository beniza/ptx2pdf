#!/usr/bin/python3

import sys, os, argparse, re

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint
from ptxprint.utils import get_ptsettings, allbooks
from ptxprint.reference import BookNames, RefList, RefRange, Reference
from ptxprint.ptsettings import ParatextSettings

_bkcodes = ("Gen", "Exod", "Lev", "Num", "Deut", "Josh", "Judg", "Ruth", "1Sam",
        "2Sam", "1Kgs", "2Kgs", "1Chr", "2Chr", "Ezra", "Neh", "Esth", "Job",
        "Ps", "Prov", "Eccl", "Song", "Isa", "Jer", "Lam", "Ezek", "Dan", "Hos",
        "Joel", "Amos", "Obad", "Jonah", "Mic", "Nah", "Hab", "Zeph", "Hag", "Zech", "Mal", 
        "ZZZ", "Matt", "Mark", "Luke", "John", "Acts", "Rom", "1Cor", "2Cor", "Gal", "Eph",
        "Phil", "Col", "1Thess", "2Thess", "1Tim", "2Tim", "Titus", "Phlm", "Heb", "Jas",
        "1Pet", "2Pet", "1John", "2John", "3John", "Jude", "Rev")
bkcodes = {k: i for i, k in enumerate(_bkcodes)}

def parse(s):
    res = []
    for b in s.split("-"):
        m = re.match(r"^("+"|".join(_bkcodes)+")\.(\d+)\.(\d+)", b)
        res.append(Reference(allbooks[bkcodes[m.group(1)]], int(m.group(2)), int(m.group(3))))
    if len(res) > 1:
        return RefRange(res[0], res[1])
    else:
        return res[0]


parser = argparse.ArgumentParser()
parser.add_argument("pid",help="Project ID to work with")
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-c','--config',default="Default",help="Project config to write to")
parser.add_argument('-i',"--infile",required=True,help="Input TSV (ref, target, votes)")
parser.add_argument('-b','--book',action="append",default=[],help="Book to generate for")
parser.add_argument('-v','--votes',type=int,default=0,help="Must have this many votes to be included")
parser.add_argument('-z','--zwsp',action='store_true',help='Add ZWSP after ; and ,')
args = parser.parse_args()

if args.paratext is None:
    args.paratext = os.getenv("PTXPRINT_PROJECTSDIR", None)
    if args.paratext is None:
        args.paratext = get_ptsettings()

ptsettings = ParatextSettings(args.paratext, args.pid)
results = {}
with open(args.infile, encoding="utf-8") as inf:
    for l in inf.readlines():
        if "#" in l:
            continue
        b = l.split()
        votes = int(b[2]) if len(b) > 2 else 0
        if votes > args.votes:
            results.setdefault(parse(b[0]), RefList()).append(parse(b[1]))

addsep = ("; ", ";\u200B", ",\u200B") if args.zwsp else ("; ", ";", ",")

template = "\n\\AddTrigger {bk}{chap}.{verse}-preverse\n\\x - \\xo {chap}:{verse} \\xt {refs}\\x*\n\\EndTrigger\n"
fpath = os.path.join(args.paratext, args.pid, "shared", "ptxprint", args.config, "triggers")
os.makedirs(fpath, exist_ok=True)
for b in args.book:
    fname = ptsettings.getBookFilename(b)
    i = fname.rindex(".")
    if i >= 0:
        fname = fname[:i]+"-"+args.config+fname[i:]
    with open(os.path.join(fpath, fname + ".triggers"), "w", encoding="utf-8") as outf:
        for k, v in sorted(((k,v) for k, v in results.items() if k.book == b)):
            v.sort()
            outf.write(template.format(bk=k.book, chap=k.chap, verse=k.verse, refs=v.__str__(ptsettings, addsep=addsep)))

        
        



