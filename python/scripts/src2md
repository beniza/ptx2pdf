#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 19 15:47:39 2020

@author: jakem
"""

import argparse, os, re, difflib
from enum import Enum

circled = "".join(chr(x) for x in range(0x2460, 0x2474))
invcircled = "".join(chr(x) for x in list(range(0x2776, 0x2780)) + list(range(0x24EB, 0x24F5)))

def _matchcircle(m, base="\u25CF", prefix=None):
    if m.group(1) == '+': return base
    try:
        v = int(m.group(1))
    except (TypeError, ValueError):
        v = -1
    if 0 < v < 21:
        if base == "\u25CF":
            return invcircled[v-1]
        else:
            return circled[v-1]
    else:
        return prefix + "(" + m.group(1) + ")"

def nummatch(txt, prefix="", invert=False):
    def _matchrep(m):
        return _matchcircle(m, base="\u25CF" if invert else "\u25CB", prefix=prefix)
    return re.sub(prefix+r"\(([\+0-9]+)\)", _matchrep, txt)

class M(Enum):
    Vanilla = 0
    TeX = 1
    Skip = 2
    Text = 3
    Notes = 4
    Python = 5
    
    
class Lines(list):
    def __init__(self, flavour=M.Vanilla, startline=0, notes=None, filename=None):
        self.flavour = flavour
        self.startline = startline
        self.notes = notes
        self.filename = filename
        
    def __repr__(self):
        if verbose:
            return f"Lines object ({self.flavour.name}) with {len(self)} lines\n" + shift("\n".join([str(x) for x in self]))
        else:
            return f"Lines object ({self.flavour.name}) with {len(self)} lines\n" + shift("\n".join([str(self[0])] + ["..."]) if not self.isempty() else "(Empty)")
        
    def isempty(self):
        return [x for x in self if x != ""] == []
    
    def output(self):
        self.strip()
        if self.flavour == M.TeX:
            return ([] if self.filename is None else [f"\\fileheader{{{self.filename}}}"]) + ["```{.latex .numberLines startFrom=\"" + str(self.startline) + "\"}"] + self + ["```"]
        elif self.flavour == M.Python:
            return ([] if self.filename is None else [f"\\fileheader{{{self.filename}}}"]) + ["```{.python .numberLines startFrom=\"" + str(self.startline) + "\"}"] + self + ["```"]
        elif self.flavour == M.Text:
            return self
        elif self.flavour == M.Skip:
            return [] #[f"Skipped {len(self)} lines"]
        elif self.flavour == M.Notes:
            output = []
            for x in self:
                if output != [] and type(output[-1]) != type(x) and not output[-1] == "":
                    output.append("")
                if type(x) is str:
                    output += [x]
                else:
                    output += x.output()
            return output
    
    def add(self, x):
        if self.flavour == M.Text:
            self.append(x.lstrip("% ").replace("\\", "\\\\"))
        else:
            self.append(x)
    
    def strip(self):
        while self != [] and type(self[0]) is str and self[0].strip() in ("", "%"):
            self.pop(0)
            self.startline += 1
        while self != [] and type(self[-1]) is str and self[-1].strip() in ("", "%"):
            self.pop(-1)
            
    def gettag(self):
        output = []
        for x in self:
            if type(x) is Link:
                output += x.gettag()
        return output
    
    
class Link:
    def __init__(self, tag, notes):
        self.tag = tag
        self.notes = notes
    
    def __repr__(self):
        return f"Link to {self.tag}"
    
    def output(self):
        try:
            return self.notes[self.tag].output()
        except KeyError:
            print(f"Link {self.tag} failed; maybe you meant {' or '.join(difflib.get_close_matches(self.tag, self.notes))}?")
            return [f"### Link *{self.tag}* failed"]
    
    def gettag(self):
        try:
            return [self.tag] + self.notes[self.tag].gettag()
        except KeyError:
            print(f"Link {self.tag} failed; maybe you meant {' or '.join(difflib.get_close_matches(self.tag, self.notes))}?")
            return []
    

def shift(string):
    return "\n".join(["-> " + l for l in string.splitlines()])


class Item(list):
    def __init__(self, tag, notes, filename, mode):
        self.tag = tag
        self.mode = mode
        self.notes = notes
        self.filename = filename
        
    def __repr__(self):
        return f"Item object {self.tag} with {len(self)} sub\n" + shift(self.listrep())
    
    def add(self, x, lineno=0):
        if type(x) is str:
            if self == [] or type(self[-1]) is not Lines or self[-1].flavour != self.mode:
                self.append(Lines(self.mode, lineno, filename=self.filename))
            self[-1].add(x)
        else:
            self.append(x)

    def listrep(self):
        return str("\n".join(self.list()))
    
    def list(self):
        return [str(x) for x in self]
    
    def clean(self):
        for x in self:
            if type(x) is Item:
                x.clean()
            elif type(x) is Lines:
                if x.isempty():
                    self.remove(x)
    
    def output(self):
        output = []#[f"## Section {self.tag}"]
        for x in self:
            output += [""] if output != [] else []
            output += x.output()
        return output
    
    def gettag(self):
        output = []
        for x in self:
            output += [*x.gettag()]
        return output
    
class Codeparser:
    def __init__(self, filename, notes, codeflavour, commentchar):
        self.stack = []
        self.item = None
        self.filename = os.path.basename(filename)
        self.notes = notes
        self.codeflavour = codeflavour
        self.commentchar = commentchar
        try:
            self.file = open(filename, encoding="utf-8")
        except PermissionError:
            print(f"Encountered PermissionError with file {self.filename}")
        else:
            self.parse()
            self.file.close()
    
    def __repr__(self):
        return str(self.item)
    
    def startitem(self, tag):
        if self.item is not None:
            self.stack.append(self.item.tag)
        self.notes[tag] = self.item = Item(tag, notes=self.notes, filename=self.filename, mode=self.codeflavour)  
    
    def enditem(self, tag=None):
        if self.stack != []:
            if tag is not None and self.item.tag != tag:
                print(f"Unexpected closing tag {self.commentchar}-{tag}; expected {self.commentchar}-{self.item.tag} to come first")
            self.item = self.notes[self.stack.pop(-1)]
        
    def linegen(self):
        self.lineno = 0
        yield f"{self.commentchar}+{self.filename}"
        for l in self.file.readlines():
            self.lineno += 1
            yield l.strip("\n")
        self.lineno += 1
        yield f"{self.commentchar}-{self.filename}"
    
    def parse(self):
        for line in self.linegen():
            sline = line.lstrip()
            if verbose:
                print(line)
            if sline.startswith(self.commentchar + "+"):
                self.startitem(sline[2:])
            elif sline.startswith(self.commentchar + "-"):
                self.enditem(sline[2:])
            elif sline.startswith(self.commentchar + "="):
                self.item.add(Link(sline[2:], notes=self.notes))
            elif sline.startswith(self.commentchar + ":strip") or sline.startswith(self.commentchar + ":skip"):
                self.item.mode = M.Skip
            elif sline.startswith(self.commentchar + ":"):
                self.item.mode = M.Text
            else:
                #print(self.item.mode, line)
                if self.item.mode is M.Skip and not sline.startswith(self.commentchar):
                    self.item.mode = self.codeflavour
                elif self.item.mode is M.Text and not (sline.startswith(self.commentchar) or sline == ""): 
                    self.item.mode = self.codeflavour
                self.item.add(nummatch(line, prefix=self.commentchar) , self.lineno)
                #self.item.add(nummatch(line, prefix="%") , self.lineno)
        if self.stack != []:
            print(f"You missed one or more closing tags: {' and '.join([f'{self.commentchar}-' + x for x in self.stack])}")
        self.item.clean()
        
    def output(self):
        return self.item.output()

class TeXparser(Codeparser):
    def __init__(self, filename, notes):
        super().__init__(filename=filename, notes=notes, codeflavour=M.TeX, commentchar="%")
        
class Pythonparser(Codeparser):
    def __init__(self, filename, notes):
        super().__init__(filename=filename, notes=notes, codeflavour=M.Python, commentchar="#")

class Noteparser:
    def __init__(self, filename, notes):
        self.filename = os.path.basename(filename)
        self.note = None
        self.notes = notes
        self.stack = []
        self.file = open(filename, encoding="utf-8")
        self.parse()
        self.file.close()
    
    def startnote(self, tag):
        if self.note is not None:
            self.stack.append(tag)
        self.note = self.notes[tag] = Lines(M.Notes, notes=self.notes)
    
    def endnote(self, tag):
        if self.stack != []:
            if tag is not None and self.stack[-1] != tag:
                print(f"Unexpected closing tag [-{tag}]::; expected [-{self.stack[-1]}]:: to come first")
            self.stack.pop(-1)
    
    def linegen(self):
        for l in self.file.readlines():
            yield l.strip("\n")
    
    def parse(self):
        for line in self.linegen():
            sline = line.strip()
            # could put an if sline.endswith("]::") here and indent until else:
            if sline.startswith("[+"):
                self.startnote(sline.lstrip("[+").rstrip("]:"))
            elif sline.startswith("[-"):
                self.endnote(sline.lstrip("[-").rstrip("]:"))
            elif sline.startswith("[="):
                self.note.append(Link(sline.lstrip("[=").rstrip("]:"), notes=self.notes))
            else:
                if self.note is not None:
                    self.note.append(nummatch(line, invert=True))
        if self.stack != []:
            print(f"You missed one or more closing tags: {' and '.join(['[-' + x + ']::' for x in self.stack])}")
        
class Outputter:
    def __init__(self):
        self.count = 1
        self.invcount = 1

    def docircled(self, m):
        i = circled.find(m.group(0)) + 1
        if i <= 0:
            i = self.count
            res = circled[i-1]
        else:
            res = m.group(0)
        self.count = i + 1
        if self.count > 20:
            self.count = 1
        return res

    def doinvcircled(self, m):
        i = invcircled.find(m.group(0)) + 1
        if i <= 0:
            i = self.invcount
            res = invcircled[i-1]
        else:
            res = m.group(0)
        self.invcount = i + 1
        if self.invcount > 20:
            self.invcount = 1
        return res

    def __call__(self, txt):
        return re.sub("[\u25CF\u2776-\u277F\u24EB-\u24F4]", self.doinvcircled,
                      re.sub("[\u25CB\u2460-\u2473]", self.docircled, txt)) 

parser = argparse.ArgumentParser()
parser.add_argument("infiles",nargs="+", help="Input TeX/markdown files")
parser.add_argument("--pythonfiles",nargs="+", help="Input Python source code")
parser.add_argument("-v", "--verbose", action="store_true", help="Verbose (show all output and full tree)")
parser.add_argument("-o","--output",required=True, help="Output file")
parser.add_argument("-t","--tree", default="main", help="Name of tree node [main]")
parser.add_argument("-m","--map", action="store_true", help="Show document map")
args = parser.parse_args()
verbose = args.verbose

notes1 = {}

def triage(infiles, pyfiles):
    if infiles is not None:
        for f in infiles:
            if f.endswith(".md"):
                yield f, Noteparser
            elif f.endswith(".tex"):
                yield f, TeXparser
    if pyfiles is not None:
        for f in pyfiles:
            yield f, Pythonparser

def createmd(notesdict, infilenames, pythonfilenames, outputfilename, treenode=None, givemap=False):
    for f, parser in triage(infilenames, pythonfilenames):
        parser(f, notesdict)
    if givemap:
        for k in notesdict:
            try:
                print(f"Note: {k}\n{notesdict[k]}")
            except UnicodeEncodeError:
                print(f"Encountered UnicodeEncodeError when trying to print note {k}")
    outer = Outputter()
    outputfile = open(outputfilename, "w", encoding="utf-8")
    outputfile.write("\n".join(outer(s) for s in notesdict[treenode].output()))
    outputfile.close()

createmd(notes1, args.infiles, args.pythonfiles, args.output, args.tree, args.map)

# jobs = [(f, Pythonparser) for f in args.python] + [(f, TeXparser) for f in args.tex] + [(f, analyse(f) for args.files)]